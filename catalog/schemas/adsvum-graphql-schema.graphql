schema {
  query: Query
  mutation: Mutation
}

type AdAppProfile {
  appId: String
  type: String
  applicationName: String
  applicationRitaId: String
  description: String
  manager: AdManager
  managerStv: AdManager
  applicationTemplate: AdApplicationTemplate
}

type AdApplicationTemplate {
  onlineFormular: Boolean!
  approve: Boolean!
  approveTwice: Boolean!
  execSrf: Boolean!
  descriptionMac: String
  ntGroup: String
}

type AdManager {
  mail: String
  samAccountName: String
  department: String
  distinguishedName: String
  statusAccountControl: Boolean!
}

type AuthenticateUserPayload {
  ldapAuthenticateResult: LdapAuthenticateResult
}

type KeyValuePairOfStringAndString {
  key: String!
  value: String!
}

type LdapAuthenticateResult {
  userId: String!
  isAuthenticated: Boolean!
  claims: [KeyValuePairOfStringAndString!]!
}

type Mutation {
  authenticateUser(input: AuthenticateUserInput!): AuthenticateUserPayload! @authorize(policy: "AdsvumAuth", apply: BEFORE_RESOLVER)
}

type Query {
  claimsByAccountName(profileIds: [UUID!]! samAccountName: String!): [UserClaim!]! @authorize(policy: "AdsvumRead", apply: BEFORE_RESOLVER)
  usersByApplicationId(applicationId: String!): [UserOfApplication!]! @authorize(policy: "AdsvumRead", apply: BEFORE_RESOLVER)
  applicationProfileById(applicationId: UUID!): [AdAppProfile!]! @authorize(policy: "AdsvumRead", apply: BEFORE_RESOLVER)
  user(userId: String! appProfiles: [UUID!]): User! @authorize(policy: "AdsvumRead", apply: BEFORE_RESOLVER)
}

type User {
  name: String
  distinguishedName: String
  mail: String
  samAccountName: String
  userGpraNummer: String
  surname: String
  givenName: String
  userPrincipalName: String
  displayName: String
  userDataSource: String
  userApplications: [String!]
  company: String
  description: String
  mobileNumber: String
  azureObjectId: UUID
  isEnabled: Boolean!
  isLocked: Boolean!
  department: String
  employeeId: String
}

type UserClaim {
  type: String
  value: String
  properties: [KeyValuePairOfStringAndString!]!
}

type UserOfApplication {
  sAMAccountName: String
  mail: String
  sn: String
  givenName: String
  displayName: String
  telephoneNumber: String
  distinguishedName: String
  employeeType: String
  gpraNumber: String
  azureObjectId: String!
}

input AuthenticateUserInput {
  userId: String!
  password: String!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on SCHEMA | OBJECT | FIELD_DEFINITION

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! = 0 "Streamed when true." if: Boolean) on FIELD

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")
